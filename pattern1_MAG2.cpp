// This file has been automatically generated by the pattern compiler.
// DO NOT EDIT!

#ifndef MAGNUM2
#define MAGNUM2
#endif 

#define PATCOM_OUTPUT
#include "tester.h"
#include "pattern1_MAG2.h"



/************ pattern "CFG_set_PAT" ************/

PATTERN_INITIAL_CONDITIONS( CFG_set_PAT )   /* C Code to set initial conditions */
{
	
	count( 1, 31);
}

PATTERN_INSTRUCTIONS( CFG_set_PAT )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0008000E,0x8000000C,0x00000000,0x08000000,0x00010000,0x00200043,0x00000000,0x34043400,0x380010D0)
	PATTERN_INSTRUCTION(0x00000018,0x0008000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( CFG_set_PAT )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "CFG_loop" )
}

PATTERN_MAR_RELOC_UINSTS( CFG_set_PAT )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 1 )
}

PATTERN_MAR_FUNCB_UINSTS( CFG_set_PAT )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 1, CFG_set_PAT, 1 )
	PATTERN_MAR_FUNCB_UINST( 0, CFG_set_PAT, 0 )
}

PATTERN_COUNTER_UINSTS( CFG_set_PAT )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, CFG_set_PAT, 0 )
}

PATTERN_VERSIONS( CFG_set_PAT )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( CFG_set_PAT )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET2 )
}

PATTERN_USED_VIHHS( CFG_set_PAT )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( CFG_set_PAT )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( CFG_set_PAT )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( CFG_set_PAT )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( CFG_set_PAT )
	INSTRUCTIONS( CFG_set_PAT )
	LABELS( CFG_set_PAT )
	MAR_RELOC_UINSTS( CFG_set_PAT )
	MAR_FUNCB_UINSTS( CFG_set_PAT )
	COUNTER_UINSTS( CFG_set_PAT )
	VERSIONS( CFG_set_PAT )
	USED_TSETS( CFG_set_PAT )
	USED_VIHHS( CFG_set_PAT )
	ATTRIBUTES( CFG_set_PAT )
	HW_REQUIREMENTS( CFG_set_PAT )
}



/************ pattern "CFG_get_PAT" ************/

PATTERN_INITIAL_CONDITIONS( CFG_get_PAT )   /* C Code to set initial conditions */
{
	
	xmain( 0x0 );
	ymain( ymax() );
	count( 1, 31);
}

PATTERN_INSTRUCTIONS( CFG_get_PAT )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0008000E,0x8000000C,0x00000000,0x08000000,0x000100A0,0x00200083,0x00000000,0x34487400,0x38012110)
	PATTERN_INSTRUCTION(0x00000018,0x0008000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( CFG_get_PAT )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "CFG_loop" )
}

PATTERN_MAR_RELOC_UINSTS( CFG_get_PAT )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 1 )
}

PATTERN_MAR_FUNCB_UINSTS( CFG_get_PAT )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 1, CFG_get_PAT, 1 )
	PATTERN_MAR_FUNCB_UINST( 0, CFG_get_PAT, 0 )
}

PATTERN_COUNTER_UINSTS( CFG_get_PAT )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, CFG_get_PAT, 0 )
}

PATTERN_VERSIONS( CFG_get_PAT )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( CFG_get_PAT )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET3 )
}

PATTERN_USED_VIHHS( CFG_get_PAT )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( CFG_get_PAT )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( CFG_get_PAT )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( CFG_get_PAT )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( CFG_get_PAT )
	INSTRUCTIONS( CFG_get_PAT )
	LABELS( CFG_get_PAT )
	MAR_RELOC_UINSTS( CFG_get_PAT )
	MAR_FUNCB_UINSTS( CFG_get_PAT )
	COUNTER_UINSTS( CFG_get_PAT )
	VERSIONS( CFG_get_PAT )
	USED_TSETS( CFG_get_PAT )
	USED_VIHHS( CFG_get_PAT )
	ATTRIBUTES( CFG_get_PAT )
	HW_REQUIREMENTS( CFG_get_PAT )
}



/************ pattern "address_pat" ************/

PATTERN_INITIAL_CONDITIONS( address_pat )   /* C Code to set initial conditions */
{
	
}

PATTERN_INSTRUCTIONS( address_pat )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0008000E,0x00000018,0x00000000,0x00000000,0x00010000,0x00000141,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00000018,0x0008000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( address_pat )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "read_loop" )
}

PATTERN_MAR_RELOC_UINSTS( address_pat )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 1 )
}

PATTERN_MAR_FUNCB_UINSTS( address_pat )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 1, address_pat, 1 )
}

PATTERN_VERSIONS( address_pat )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( address_pat )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET6 )
}

PATTERN_USED_VIHHS( address_pat )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( address_pat )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( address_pat )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( address_pat )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( address_pat )
	INSTRUCTIONS( address_pat )
	LABELS( address_pat )
	MAR_RELOC_UINSTS( address_pat )
	MAR_FUNCB_UINSTS( address_pat )
	VERSIONS( address_pat )
	USED_TSETS( address_pat )
	USED_VIHHS( address_pat )
	ATTRIBUTES( address_pat )
	HW_REQUIREMENTS( address_pat )
}



/************ pattern "int_clk_read_pat" ************/

PATTERN_INITIAL_CONDITIONS( int_clk_read_pat )   /* C Code to set initial conditions */
{
	
}

PATTERN_INSTRUCTIONS( int_clk_read_pat )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0008000E,0x8000000C,0x00000000,0x08000000,0x000100A0,0x000808C0,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x00000018,0x0008000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( int_clk_read_pat )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "read_loop" )
}

PATTERN_MAR_RELOC_UINSTS( int_clk_read_pat )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 1 )
}

PATTERN_MAR_FUNCB_UINSTS( int_clk_read_pat )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 1, int_clk_read_pat, 1 )
	PATTERN_MAR_FUNCB_UINST( 0, int_clk_read_pat, 0 )
}

PATTERN_COUNTER_UINSTS( int_clk_read_pat )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, int_clk_read_pat, 0 )
}

PATTERN_VERSIONS( int_clk_read_pat )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( int_clk_read_pat )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET4 )
}

PATTERN_USED_VIHHS( int_clk_read_pat )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( int_clk_read_pat )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( int_clk_read_pat )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( int_clk_read_pat )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( int_clk_read_pat )
	INSTRUCTIONS( int_clk_read_pat )
	LABELS( int_clk_read_pat )
	MAR_RELOC_UINSTS( int_clk_read_pat )
	MAR_FUNCB_UINSTS( int_clk_read_pat )
	COUNTER_UINSTS( int_clk_read_pat )
	VERSIONS( int_clk_read_pat )
	USED_TSETS( int_clk_read_pat )
	USED_VIHHS( int_clk_read_pat )
	ATTRIBUTES( int_clk_read_pat )
	HW_REQUIREMENTS( int_clk_read_pat )
}



/************ pattern "int_clk_write_pat" ************/

PATTERN_INITIAL_CONDITIONS( int_clk_write_pat )   /* C Code to set initial conditions */
{
	
}

PATTERN_INSTRUCTIONS( int_clk_write_pat )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0008000E,0x8000000C,0x00000000,0x08000000,0x00010000,0x00008900,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x00000018,0x0008000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( int_clk_write_pat )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "write_loop" )
}

PATTERN_MAR_RELOC_UINSTS( int_clk_write_pat )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 1 )
}

PATTERN_MAR_FUNCB_UINSTS( int_clk_write_pat )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 1, int_clk_write_pat, 1 )
	PATTERN_MAR_FUNCB_UINST( 0, int_clk_write_pat, 0 )
}

PATTERN_COUNTER_UINSTS( int_clk_write_pat )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, int_clk_write_pat, 0 )
}

PATTERN_VERSIONS( int_clk_write_pat )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( int_clk_write_pat )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET5 )
}

PATTERN_USED_VIHHS( int_clk_write_pat )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( int_clk_write_pat )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( int_clk_write_pat )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( int_clk_write_pat )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( int_clk_write_pat )
	INSTRUCTIONS( int_clk_write_pat )
	LABELS( int_clk_write_pat )
	MAR_RELOC_UINSTS( int_clk_write_pat )
	MAR_FUNCB_UINSTS( int_clk_write_pat )
	COUNTER_UINSTS( int_clk_write_pat )
	VERSIONS( int_clk_write_pat )
	USED_TSETS( int_clk_write_pat )
	USED_VIHHS( int_clk_write_pat )
	ATTRIBUTES( int_clk_write_pat )
	HW_REQUIREMENTS( int_clk_write_pat )
}



/************ pattern "reset_set_cycle_pat" ************/

PATTERN_INITIAL_CONDITIONS( reset_set_cycle_pat )   /* C Code to set initial conditions */
{
	
	dmain( 0x0    );
	dbase( 0xffff );
}

PATTERN_INSTRUCTIONS( reset_set_cycle_pat )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00000000,0x00000000,0x34443440,0x000110D1)
	PATTERN_INSTRUCTION(0x00000018,0x8008000C,0x00000000,0x08000000,0x00010000,0x00008900,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x0000002C,0x00000018,0x00000000,0x02000000,0x00010000,0x00000000,0x00000000,0x34443440,0x000110D1)
	PATTERN_INSTRUCTION(0x0000000C,0x8018000C,0x00000000,0x0A000000,0x40010002,0x00008900,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x0028100E,0x8000000C,0x00000000,0x08000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00000018,0x0028000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( reset_set_cycle_pat )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "init_loop" )
	PATTERN_LABEL( 1, "reset_loop" )
	PATTERN_LABEL( 2, "switch_loop" )
	PATTERN_LABEL( 3, "set_loop" )
	PATTERN_LABEL( 4, "finish_loop" )
}

PATTERN_MAR_RELOC_UINSTS( reset_set_cycle_pat )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 1 )
	PATTERN_MAR_RELOC_UINST( 3 )
	PATTERN_MAR_RELOC_UINST( 4 )
	PATTERN_MAR_RELOC_UINST( 5 )
}

PATTERN_MAR_FUNCB_UINSTS( reset_set_cycle_pat )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 5, reset_set_cycle_pat, 5 )
	PATTERN_MAR_FUNCB_UINST( 1, reset_set_cycle_pat, 1 )
	PATTERN_MAR_FUNCB_UINST( 3, reset_set_cycle_pat, 3 )
	PATTERN_MAR_FUNCB_UINST( 4, reset_set_cycle_pat, 0 )
}

PATTERN_COUNTER_UINSTS( reset_set_cycle_pat )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 1, reset_set_cycle_pat, 1 )
	PATTERN_COUNTER_UINST( 3, reset_set_cycle_pat, 3 )
	PATTERN_COUNTER_UINST( 4, reset_set_cycle_pat, 0 )
}

PATTERN_VERSIONS( reset_set_cycle_pat )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( reset_set_cycle_pat )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET5 )
}

PATTERN_USED_VIHHS( reset_set_cycle_pat )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( reset_set_cycle_pat )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( reset_set_cycle_pat )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( reset_set_cycle_pat )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( reset_set_cycle_pat )
	INSTRUCTIONS( reset_set_cycle_pat )
	LABELS( reset_set_cycle_pat )
	MAR_RELOC_UINSTS( reset_set_cycle_pat )
	MAR_FUNCB_UINSTS( reset_set_cycle_pat )
	COUNTER_UINSTS( reset_set_cycle_pat )
	VERSIONS( reset_set_cycle_pat )
	USED_TSETS( reset_set_cycle_pat )
	USED_VIHHS( reset_set_cycle_pat )
	ATTRIBUTES( reset_set_cycle_pat )
	HW_REQUIREMENTS( reset_set_cycle_pat )
}



/************ pattern "int_clk_write_one_address_pat" ************/

PATTERN_INITIAL_CONDITIONS( int_clk_write_one_address_pat )   /* C Code to set initial conditions */
{
	
}

PATTERN_INSTRUCTIONS( int_clk_write_one_address_pat )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0008000E,0x00000018,0x00000000,0x00000000,0x00010000,0x00008900,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00000018,0x0008000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( int_clk_write_one_address_pat )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "write_loop" )
}

PATTERN_MAR_RELOC_UINSTS( int_clk_write_one_address_pat )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 1 )
}

PATTERN_MAR_FUNCB_UINSTS( int_clk_write_one_address_pat )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 1, int_clk_write_one_address_pat, 1 )
}

PATTERN_VERSIONS( int_clk_write_one_address_pat )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( int_clk_write_one_address_pat )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET5 )
}

PATTERN_USED_VIHHS( int_clk_write_one_address_pat )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( int_clk_write_one_address_pat )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( int_clk_write_one_address_pat )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( int_clk_write_one_address_pat )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( int_clk_write_one_address_pat )
	INSTRUCTIONS( int_clk_write_one_address_pat )
	LABELS( int_clk_write_one_address_pat )
	MAR_RELOC_UINSTS( int_clk_write_one_address_pat )
	MAR_FUNCB_UINSTS( int_clk_write_one_address_pat )
	VERSIONS( int_clk_write_one_address_pat )
	USED_TSETS( int_clk_write_one_address_pat )
	USED_VIHHS( int_clk_write_one_address_pat )
	ATTRIBUTES( int_clk_write_one_address_pat )
	HW_REQUIREMENTS( int_clk_write_one_address_pat )
}



/************ pattern "reset_set_single_cell_cycle_pat" ************/

PATTERN_INITIAL_CONDITIONS( reset_set_single_cell_cycle_pat )   /* C Code to set initial conditions */
{
	
	dmain( 0x0    );
	dbase( 0xffff );
}

PATTERN_INSTRUCTIONS( reset_set_single_cell_cycle_pat )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00000000,0x00000000,0x34443440,0x000110D1)
	PATTERN_INSTRUCTION(0x0000002C,0x8010000C,0x00000000,0x0A000000,0x00010000,0x00008900,0x00000000,0x34443440,0x000110D1)
	PATTERN_INSTRUCTION(0x0000000C,0x8018000C,0x00000000,0x0A000000,0x40010002,0x00008900,0x00000000,0x34443440,0x000110D1)
	PATTERN_INSTRUCTION(0x0020100E,0x8000000C,0x00000000,0x08000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x00000018,0x0020000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( reset_set_single_cell_cycle_pat )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "init_loop" )
	PATTERN_LABEL( 1, "reset_loop" )
	PATTERN_LABEL( 2, "set_loop" )
	PATTERN_LABEL( 3, "another_loop" )
}

PATTERN_MAR_RELOC_UINSTS( reset_set_single_cell_cycle_pat )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 1 )
	PATTERN_MAR_RELOC_UINST( 2 )
	PATTERN_MAR_RELOC_UINST( 3 )
	PATTERN_MAR_RELOC_UINST( 4 )
}

PATTERN_MAR_FUNCB_UINSTS( reset_set_single_cell_cycle_pat )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 4, reset_set_single_cell_cycle_pat, 4 )
	PATTERN_MAR_FUNCB_UINST( 1, reset_set_single_cell_cycle_pat, 2 )
	PATTERN_MAR_FUNCB_UINST( 2, reset_set_single_cell_cycle_pat, 3 )
	PATTERN_MAR_FUNCB_UINST( 3, reset_set_single_cell_cycle_pat, 0 )
}

PATTERN_COUNTER_UINSTS( reset_set_single_cell_cycle_pat )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 1, reset_set_single_cell_cycle_pat, 2 )
	PATTERN_COUNTER_UINST( 2, reset_set_single_cell_cycle_pat, 3 )
	PATTERN_COUNTER_UINST( 3, reset_set_single_cell_cycle_pat, 0 )
}

PATTERN_VERSIONS( reset_set_single_cell_cycle_pat )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( reset_set_single_cell_cycle_pat )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET5 )
}

PATTERN_USED_VIHHS( reset_set_single_cell_cycle_pat )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( reset_set_single_cell_cycle_pat )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( reset_set_single_cell_cycle_pat )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( reset_set_single_cell_cycle_pat )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( reset_set_single_cell_cycle_pat )
	INSTRUCTIONS( reset_set_single_cell_cycle_pat )
	LABELS( reset_set_single_cell_cycle_pat )
	MAR_RELOC_UINSTS( reset_set_single_cell_cycle_pat )
	MAR_FUNCB_UINSTS( reset_set_single_cell_cycle_pat )
	COUNTER_UINSTS( reset_set_single_cell_cycle_pat )
	VERSIONS( reset_set_single_cell_cycle_pat )
	USED_TSETS( reset_set_single_cell_cycle_pat )
	USED_VIHHS( reset_set_single_cell_cycle_pat )
	ATTRIBUTES( reset_set_single_cell_cycle_pat )
	HW_REQUIREMENTS( reset_set_single_cell_cycle_pat )
}



/************ pattern "old_fastest_write_test_pattern" ************/

PATTERN_INITIAL_CONDITIONS( old_fastest_write_test_pattern )   /* C Code to set initial conditions */
{
	
	count( 1, 9);
	count( 2, 6);
	count( 3, 0);
}

PATTERN_INSTRUCTIONS( old_fastest_write_test_pattern )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x00000038,0x80000018,0x00000000,0x08000000,0x00010000,0x00800184,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00819984,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00001058,0x8010000C,0x00000000,0x08000000,0x00010000,0x00819984,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00801984,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0028200E,0x8000000C,0x00000000,0x08000000,0x00010000,0x00801984,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x00000018,0x0028000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( old_fastest_write_test_pattern )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "write_test_start" )
	PATTERN_LABEL( 1, "write_start" )
	PATTERN_LABEL( 2, "write_clock_loop" )
	PATTERN_LABEL( 3, "write_done" )
	PATTERN_LABEL( 4, "another_loop" )
}

PATTERN_MAR_RELOC_UINSTS( old_fastest_write_test_pattern )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 2 )
	PATTERN_MAR_RELOC_UINST( 4 )
	PATTERN_MAR_RELOC_UINST( 5 )
}

PATTERN_MAR_FUNCB_UINSTS( old_fastest_write_test_pattern )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 5, old_fastest_write_test_pattern, 5 )
	PATTERN_MAR_FUNCB_UINST( 2, old_fastest_write_test_pattern, 2 )
	PATTERN_MAR_FUNCB_UINST( 4, old_fastest_write_test_pattern, 0 )
	PATTERN_MAR_FUNCB_UINST( 0, old_fastest_write_test_pattern, -1 )
}

PATTERN_COUNTER_UINSTS( old_fastest_write_test_pattern )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, old_fastest_write_test_pattern, -1 )
	PATTERN_COUNTER_UINST( 2, old_fastest_write_test_pattern, 2 )
	PATTERN_COUNTER_UINST( 4, old_fastest_write_test_pattern, 0 )
}

PATTERN_VERSIONS( old_fastest_write_test_pattern )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( old_fastest_write_test_pattern )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET7 )
}

PATTERN_USED_VIHHS( old_fastest_write_test_pattern )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( old_fastest_write_test_pattern )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( old_fastest_write_test_pattern )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( old_fastest_write_test_pattern )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( old_fastest_write_test_pattern )
	INSTRUCTIONS( old_fastest_write_test_pattern )
	LABELS( old_fastest_write_test_pattern )
	MAR_RELOC_UINSTS( old_fastest_write_test_pattern )
	MAR_FUNCB_UINSTS( old_fastest_write_test_pattern )
	COUNTER_UINSTS( old_fastest_write_test_pattern )
	VERSIONS( old_fastest_write_test_pattern )
	USED_TSETS( old_fastest_write_test_pattern )
	USED_VIHHS( old_fastest_write_test_pattern )
	ATTRIBUTES( old_fastest_write_test_pattern )
	HW_REQUIREMENTS( old_fastest_write_test_pattern )
}



/************ pattern "fastest_read_test_pattern" ************/

PATTERN_INITIAL_CONDITIONS( fastest_read_test_pattern )   /* C Code to set initial conditions */
{
	
	count( 1, 9);
	count( 2, 10);
	count( 3, amax());
}

PATTERN_INSTRUCTIONS( fastest_read_test_pattern )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0000002C,0x8000000C,0x00000000,0x08000000,0x00010000,0x008001C4,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000002C,0x0010000C,0x00000000,0x02000000,0x00010000,0x009819C4,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000100C,0x8010000C,0x00000000,0x0A000000,0x00010000,0x009819C4,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000100C,0x8020000C,0x00000000,0x08000000,0x000100A0,0x009819C4,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000004C,0x0028000C,0x00000000,0x00000000,0x00010000,0x009819C4,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x0030000C,0x00000000,0x02000000,0x00010000,0x009819C4,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0038200E,0x8008000C,0x00000000,0x08000000,0x00010000,0x009819C4,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x00000018,0x0038000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( fastest_read_test_pattern )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "read_test_start" )
	PATTERN_LABEL( 1, "read_start" )
	PATTERN_LABEL( 2, "read_clock_loop" )
	PATTERN_LABEL( 3, "read_test" )
	PATTERN_LABEL( 4, "read_done" )
	PATTERN_LABEL( 5, "read_test_done" )
	PATTERN_LABEL( 6, "another_loop" )
}

PATTERN_MAR_RELOC_UINSTS( fastest_read_test_pattern )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 1 )
	PATTERN_MAR_RELOC_UINST( 2 )
	PATTERN_MAR_RELOC_UINST( 3 )
	PATTERN_MAR_RELOC_UINST( 4 )
	PATTERN_MAR_RELOC_UINST( 5 )
	PATTERN_MAR_RELOC_UINST( 6 )
	PATTERN_MAR_RELOC_UINST( 7 )
}

PATTERN_MAR_FUNCB_UINSTS( fastest_read_test_pattern )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 7, fastest_read_test_pattern, 7 )
	PATTERN_MAR_FUNCB_UINST( 0, fastest_read_test_pattern, 0 )
	PATTERN_MAR_FUNCB_UINST( 1, fastest_read_test_pattern, 2 )
	PATTERN_MAR_FUNCB_UINST( 2, fastest_read_test_pattern, 2 )
	PATTERN_MAR_FUNCB_UINST( 3, fastest_read_test_pattern, 4 )
	PATTERN_MAR_FUNCB_UINST( 4, fastest_read_test_pattern, 5 )
	PATTERN_MAR_FUNCB_UINST( 5, fastest_read_test_pattern, 6 )
	PATTERN_MAR_FUNCB_UINST( 6, fastest_read_test_pattern, 1 )
}

PATTERN_COUNTER_UINSTS( fastest_read_test_pattern )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, fastest_read_test_pattern, 0 )
	PATTERN_COUNTER_UINST( 2, fastest_read_test_pattern, 2 )
	PATTERN_COUNTER_UINST( 3, fastest_read_test_pattern, 4 )
	PATTERN_COUNTER_UINST( 6, fastest_read_test_pattern, 1 )
}

PATTERN_VERSIONS( fastest_read_test_pattern )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( fastest_read_test_pattern )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET8 )
}

PATTERN_USED_VIHHS( fastest_read_test_pattern )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( fastest_read_test_pattern )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( fastest_read_test_pattern )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( fastest_read_test_pattern )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( fastest_read_test_pattern )
	INSTRUCTIONS( fastest_read_test_pattern )
	LABELS( fastest_read_test_pattern )
	MAR_RELOC_UINSTS( fastest_read_test_pattern )
	MAR_FUNCB_UINSTS( fastest_read_test_pattern )
	COUNTER_UINSTS( fastest_read_test_pattern )
	VERSIONS( fastest_read_test_pattern )
	USED_TSETS( fastest_read_test_pattern )
	USED_VIHHS( fastest_read_test_pattern )
	ATTRIBUTES( fastest_read_test_pattern )
	HW_REQUIREMENTS( fastest_read_test_pattern )
}



/************ pattern "staircase_down_external_write_test_pattern" ************/

PATTERN_INITIAL_CONDITIONS( staircase_down_external_write_test_pattern )   /* C Code to set initial conditions */
{
	
	count( 1, 5);
	count( 2, 1);
	count( 3, 3);
	count( 4, 0);
	count( 5, amax());
}

PATTERN_INSTRUCTIONS( staircase_down_external_write_test_pattern )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0000004C,0x8000000C,0x00000000,0x0A000000,0x00010000,0x00800184,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000106C,0x8008000C,0x00000000,0x0A000000,0x00010000,0x00819A04,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000200C,0x8010000C,0x00000000,0x0A000000,0x00010000,0x00819A44,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00003098,0x8018000C,0x00000000,0x08000000,0x00010000,0x00819A84,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00801984,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0030400E,0x8000000C,0x00000000,0x08000000,0x00010000,0x00801984,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x00000018,0x0030000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( staircase_down_external_write_test_pattern )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "write_test_start" )
	PATTERN_LABEL( 1, "write_clock_loop_1" )
	PATTERN_LABEL( 2, "write_clock_loop_2" )
	PATTERN_LABEL( 3, "write_clock_loop_3" )
	PATTERN_LABEL( 4, "write_done" )
	PATTERN_LABEL( 5, "another_loop" )
}

PATTERN_MAR_RELOC_UINSTS( staircase_down_external_write_test_pattern )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 1 )
	PATTERN_MAR_RELOC_UINST( 2 )
	PATTERN_MAR_RELOC_UINST( 3 )
	PATTERN_MAR_RELOC_UINST( 5 )
	PATTERN_MAR_RELOC_UINST( 6 )
}

PATTERN_MAR_FUNCB_UINSTS( staircase_down_external_write_test_pattern )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 6, staircase_down_external_write_test_pattern, 6 )
	PATTERN_MAR_FUNCB_UINST( 0, staircase_down_external_write_test_pattern, 0 )
	PATTERN_MAR_FUNCB_UINST( 1, staircase_down_external_write_test_pattern, 1 )
	PATTERN_MAR_FUNCB_UINST( 2, staircase_down_external_write_test_pattern, 2 )
	PATTERN_MAR_FUNCB_UINST( 3, staircase_down_external_write_test_pattern, 3 )
	PATTERN_MAR_FUNCB_UINST( 5, staircase_down_external_write_test_pattern, 0 )
}

PATTERN_COUNTER_UINSTS( staircase_down_external_write_test_pattern )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, staircase_down_external_write_test_pattern, 0 )
	PATTERN_COUNTER_UINST( 1, staircase_down_external_write_test_pattern, 1 )
	PATTERN_COUNTER_UINST( 2, staircase_down_external_write_test_pattern, 2 )
	PATTERN_COUNTER_UINST( 3, staircase_down_external_write_test_pattern, 3 )
	PATTERN_COUNTER_UINST( 5, staircase_down_external_write_test_pattern, 0 )
}

PATTERN_VERSIONS( staircase_down_external_write_test_pattern )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( staircase_down_external_write_test_pattern )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET7 )
	PATTERN_USED_TSET( TSET9 )
	PATTERN_USED_TSET( TSET10 )
	PATTERN_USED_TSET( TSET11 )
}

PATTERN_USED_VIHHS( staircase_down_external_write_test_pattern )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( staircase_down_external_write_test_pattern )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( staircase_down_external_write_test_pattern )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( staircase_down_external_write_test_pattern )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( staircase_down_external_write_test_pattern )
	INSTRUCTIONS( staircase_down_external_write_test_pattern )
	LABELS( staircase_down_external_write_test_pattern )
	MAR_RELOC_UINSTS( staircase_down_external_write_test_pattern )
	MAR_FUNCB_UINSTS( staircase_down_external_write_test_pattern )
	COUNTER_UINSTS( staircase_down_external_write_test_pattern )
	VERSIONS( staircase_down_external_write_test_pattern )
	USED_TSETS( staircase_down_external_write_test_pattern )
	USED_VIHHS( staircase_down_external_write_test_pattern )
	ATTRIBUTES( staircase_down_external_write_test_pattern )
	HW_REQUIREMENTS( staircase_down_external_write_test_pattern )
}



/************ pattern "single_external_write_test_pattern" ************/

PATTERN_INITIAL_CONDITIONS( single_external_write_test_pattern )   /* C Code to set initial conditions */
{
	
	count( 1, 5);
	count( 5, amax());
}

PATTERN_INSTRUCTIONS( single_external_write_test_pattern )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x00000018,0x8000000C,0x00000000,0x08000000,0x00010000,0x00800184,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00000098,0x00000018,0x00000000,0x00000000,0x00010000,0x00819A04,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00801984,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0020400E,0x8000000C,0x00000000,0x08000000,0x00010000,0x00801984,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x00000018,0x0020000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( single_external_write_test_pattern )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "write_test_start" )
	PATTERN_LABEL( 1, "write_clock_loop_1" )
	PATTERN_LABEL( 2, "write_done" )
	PATTERN_LABEL( 3, "another_loop" )
}

PATTERN_MAR_RELOC_UINSTS( single_external_write_test_pattern )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 3 )
	PATTERN_MAR_RELOC_UINST( 4 )
}

PATTERN_MAR_FUNCB_UINSTS( single_external_write_test_pattern )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 4, single_external_write_test_pattern, 4 )
	PATTERN_MAR_FUNCB_UINST( 0, single_external_write_test_pattern, 0 )
	PATTERN_MAR_FUNCB_UINST( 3, single_external_write_test_pattern, 0 )
}

PATTERN_COUNTER_UINSTS( single_external_write_test_pattern )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, single_external_write_test_pattern, 0 )
	PATTERN_COUNTER_UINST( 3, single_external_write_test_pattern, 0 )
}

PATTERN_VERSIONS( single_external_write_test_pattern )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( single_external_write_test_pattern )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET7 )
	PATTERN_USED_TSET( TSET9 )
}

PATTERN_USED_VIHHS( single_external_write_test_pattern )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( single_external_write_test_pattern )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( single_external_write_test_pattern )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( single_external_write_test_pattern )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( single_external_write_test_pattern )
	INSTRUCTIONS( single_external_write_test_pattern )
	LABELS( single_external_write_test_pattern )
	MAR_RELOC_UINSTS( single_external_write_test_pattern )
	MAR_FUNCB_UINSTS( single_external_write_test_pattern )
	COUNTER_UINSTS( single_external_write_test_pattern )
	VERSIONS( single_external_write_test_pattern )
	USED_TSETS( single_external_write_test_pattern )
	USED_VIHHS( single_external_write_test_pattern )
	ATTRIBUTES( single_external_write_test_pattern )
	HW_REQUIREMENTS( single_external_write_test_pattern )
}



/************ pattern "double_staircase_down_external_write_test_pattern" ************/

PATTERN_INITIAL_CONDITIONS( double_staircase_down_external_write_test_pattern )   /* C Code to set initial conditions */
{
	
	count( 1, 5);
	count( 2, 1);
	count( 5, amax());
}

PATTERN_INSTRUCTIONS( double_staircase_down_external_write_test_pattern )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0000000C,0x8000000C,0x00000000,0x0A000000,0x00010000,0x00800184,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00001018,0x8008000C,0x00000000,0x08000000,0x00010000,0x00819A04,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00000098,0x00000018,0x00000000,0x00000000,0x00010000,0x00819A44,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00801984,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0028400E,0x8000000C,0x00000000,0x08000000,0x00010000,0x00801984,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x00000018,0x0028000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( double_staircase_down_external_write_test_pattern )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "write_test_start" )
	PATTERN_LABEL( 1, "write_clock_loop_1" )
	PATTERN_LABEL( 2, "write_clock_loop_2" )
	PATTERN_LABEL( 3, "write_done" )
	PATTERN_LABEL( 4, "another_loop" )
}

PATTERN_MAR_RELOC_UINSTS( double_staircase_down_external_write_test_pattern )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 1 )
	PATTERN_MAR_RELOC_UINST( 4 )
	PATTERN_MAR_RELOC_UINST( 5 )
}

PATTERN_MAR_FUNCB_UINSTS( double_staircase_down_external_write_test_pattern )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 5, double_staircase_down_external_write_test_pattern, 5 )
	PATTERN_MAR_FUNCB_UINST( 0, double_staircase_down_external_write_test_pattern, 0 )
	PATTERN_MAR_FUNCB_UINST( 1, double_staircase_down_external_write_test_pattern, 1 )
	PATTERN_MAR_FUNCB_UINST( 4, double_staircase_down_external_write_test_pattern, 0 )
}

PATTERN_COUNTER_UINSTS( double_staircase_down_external_write_test_pattern )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, double_staircase_down_external_write_test_pattern, 0 )
	PATTERN_COUNTER_UINST( 1, double_staircase_down_external_write_test_pattern, 1 )
	PATTERN_COUNTER_UINST( 4, double_staircase_down_external_write_test_pattern, 0 )
}

PATTERN_VERSIONS( double_staircase_down_external_write_test_pattern )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( double_staircase_down_external_write_test_pattern )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET7 )
	PATTERN_USED_TSET( TSET9 )
	PATTERN_USED_TSET( TSET10 )
}

PATTERN_USED_VIHHS( double_staircase_down_external_write_test_pattern )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( double_staircase_down_external_write_test_pattern )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( double_staircase_down_external_write_test_pattern )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( double_staircase_down_external_write_test_pattern )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( double_staircase_down_external_write_test_pattern )
	INSTRUCTIONS( double_staircase_down_external_write_test_pattern )
	LABELS( double_staircase_down_external_write_test_pattern )
	MAR_RELOC_UINSTS( double_staircase_down_external_write_test_pattern )
	MAR_FUNCB_UINSTS( double_staircase_down_external_write_test_pattern )
	COUNTER_UINSTS( double_staircase_down_external_write_test_pattern )
	VERSIONS( double_staircase_down_external_write_test_pattern )
	USED_TSETS( double_staircase_down_external_write_test_pattern )
	USED_VIHHS( double_staircase_down_external_write_test_pattern )
	ATTRIBUTES( double_staircase_down_external_write_test_pattern )
	HW_REQUIREMENTS( double_staircase_down_external_write_test_pattern )
}



/************ pattern "quadruple_staircase_down_external_write_test_pattern" ************/

PATTERN_INITIAL_CONDITIONS( quadruple_staircase_down_external_write_test_pattern )   /* C Code to set initial conditions */
{
	
	count( 1, 5);
	count( 2, 1);
	count( 3, 2);
	count( 5, amax());
}

PATTERN_INSTRUCTIONS( quadruple_staircase_down_external_write_test_pattern )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0000004C,0x8000000C,0x00000000,0x0A000000,0x00010000,0x00800184,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000100C,0x8008000C,0x00000000,0x0A000000,0x00010000,0x00819A04,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00002098,0x8010000C,0x00000000,0x08000000,0x00010000,0x00819A44,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00801984,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0028400E,0x8000000C,0x00000000,0x08000000,0x00010000,0x00801984,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x00000018,0x0028000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( quadruple_staircase_down_external_write_test_pattern )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "write_test_start" )
	PATTERN_LABEL( 1, "write_clock_loop_1" )
	PATTERN_LABEL( 2, "write_clock_loop_2" )
	PATTERN_LABEL( 3, "write_done" )
	PATTERN_LABEL( 4, "another_loop" )
}

PATTERN_MAR_RELOC_UINSTS( quadruple_staircase_down_external_write_test_pattern )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 1 )
	PATTERN_MAR_RELOC_UINST( 2 )
	PATTERN_MAR_RELOC_UINST( 4 )
	PATTERN_MAR_RELOC_UINST( 5 )
}

PATTERN_MAR_FUNCB_UINSTS( quadruple_staircase_down_external_write_test_pattern )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 5, quadruple_staircase_down_external_write_test_pattern, 5 )
	PATTERN_MAR_FUNCB_UINST( 0, quadruple_staircase_down_external_write_test_pattern, 0 )
	PATTERN_MAR_FUNCB_UINST( 1, quadruple_staircase_down_external_write_test_pattern, 1 )
	PATTERN_MAR_FUNCB_UINST( 2, quadruple_staircase_down_external_write_test_pattern, 2 )
	PATTERN_MAR_FUNCB_UINST( 4, quadruple_staircase_down_external_write_test_pattern, 0 )
}

PATTERN_COUNTER_UINSTS( quadruple_staircase_down_external_write_test_pattern )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, quadruple_staircase_down_external_write_test_pattern, 0 )
	PATTERN_COUNTER_UINST( 1, quadruple_staircase_down_external_write_test_pattern, 1 )
	PATTERN_COUNTER_UINST( 2, quadruple_staircase_down_external_write_test_pattern, 2 )
	PATTERN_COUNTER_UINST( 4, quadruple_staircase_down_external_write_test_pattern, 0 )
}

PATTERN_VERSIONS( quadruple_staircase_down_external_write_test_pattern )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( quadruple_staircase_down_external_write_test_pattern )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET7 )
	PATTERN_USED_TSET( TSET9 )
	PATTERN_USED_TSET( TSET10 )
}

PATTERN_USED_VIHHS( quadruple_staircase_down_external_write_test_pattern )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( quadruple_staircase_down_external_write_test_pattern )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( quadruple_staircase_down_external_write_test_pattern )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( quadruple_staircase_down_external_write_test_pattern )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( quadruple_staircase_down_external_write_test_pattern )
	INSTRUCTIONS( quadruple_staircase_down_external_write_test_pattern )
	LABELS( quadruple_staircase_down_external_write_test_pattern )
	MAR_RELOC_UINSTS( quadruple_staircase_down_external_write_test_pattern )
	MAR_FUNCB_UINSTS( quadruple_staircase_down_external_write_test_pattern )
	COUNTER_UINSTS( quadruple_staircase_down_external_write_test_pattern )
	VERSIONS( quadruple_staircase_down_external_write_test_pattern )
	USED_TSETS( quadruple_staircase_down_external_write_test_pattern )
	USED_VIHHS( quadruple_staircase_down_external_write_test_pattern )
	ATTRIBUTES( quadruple_staircase_down_external_write_test_pattern )
	HW_REQUIREMENTS( quadruple_staircase_down_external_write_test_pattern )
}



/************ pattern "fastest_write_test_pattern" ************/

PATTERN_INITIAL_CONDITIONS( fastest_write_test_pattern )   /* C Code to set initial conditions */
{
	
	count( 1, 1);
	count( 2, 50);
}

PATTERN_INSTRUCTIONS( fastest_write_test_pattern )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x00000038,0x8000000C,0x00000000,0x08000000,0x00010000,0x00800184,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00819984,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00001058,0x8010000C,0x00000000,0x08000000,0x00010000,0x00819984,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00801984,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0028200E,0x8008000C,0x00000000,0x08000000,0x00010000,0x00801984,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x00000018,0x0028000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( fastest_write_test_pattern )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "write_test_start" )
	PATTERN_LABEL( 1, "write_start" )
	PATTERN_LABEL( 2, "write_clock_loop" )
	PATTERN_LABEL( 3, "write_done" )
	PATTERN_LABEL( 4, "another_loop" )
}

PATTERN_MAR_RELOC_UINSTS( fastest_write_test_pattern )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 2 )
	PATTERN_MAR_RELOC_UINST( 4 )
	PATTERN_MAR_RELOC_UINST( 5 )
}

PATTERN_MAR_FUNCB_UINSTS( fastest_write_test_pattern )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 5, fastest_write_test_pattern, 5 )
	PATTERN_MAR_FUNCB_UINST( 0, fastest_write_test_pattern, 0 )
	PATTERN_MAR_FUNCB_UINST( 2, fastest_write_test_pattern, 2 )
	PATTERN_MAR_FUNCB_UINST( 4, fastest_write_test_pattern, 1 )
}

PATTERN_COUNTER_UINSTS( fastest_write_test_pattern )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, fastest_write_test_pattern, 0 )
	PATTERN_COUNTER_UINST( 2, fastest_write_test_pattern, 2 )
	PATTERN_COUNTER_UINST( 4, fastest_write_test_pattern, 1 )
}

PATTERN_VERSIONS( fastest_write_test_pattern )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( fastest_write_test_pattern )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET7 )
}

PATTERN_USED_VIHHS( fastest_write_test_pattern )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( fastest_write_test_pattern )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( fastest_write_test_pattern )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( fastest_write_test_pattern )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( fastest_write_test_pattern )
	INSTRUCTIONS( fastest_write_test_pattern )
	LABELS( fastest_write_test_pattern )
	MAR_RELOC_UINSTS( fastest_write_test_pattern )
	MAR_FUNCB_UINSTS( fastest_write_test_pattern )
	COUNTER_UINSTS( fastest_write_test_pattern )
	VERSIONS( fastest_write_test_pattern )
	USED_TSETS( fastest_write_test_pattern )
	USED_VIHHS( fastest_write_test_pattern )
	ATTRIBUTES( fastest_write_test_pattern )
	HW_REQUIREMENTS( fastest_write_test_pattern )
}



/************ pattern "debug_time_test_pattern" ************/

PATTERN_INITIAL_CONDITIONS( debug_time_test_pattern )   /* C Code to set initial conditions */
{
	
	count( 1, 1);
	count( 2, 5);
	count( 3, 1);
}

PATTERN_INSTRUCTIONS( debug_time_test_pattern )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x00000038,0x8000000C,0x00000000,0x08000000,0x00010000,0x00800184,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00819984,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00001058,0x8010000C,0x00000000,0x08000000,0x00010000,0x00819984,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00801984,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0028200E,0x8008000C,0x00000000,0x08000000,0x00010000,0x00801984,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x00000018,0x0028000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( debug_time_test_pattern )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "write_test_start" )
	PATTERN_LABEL( 1, "write_start" )
	PATTERN_LABEL( 2, "write_clock_loop" )
	PATTERN_LABEL( 3, "write_done" )
	PATTERN_LABEL( 4, "another_loop" )
}

PATTERN_MAR_RELOC_UINSTS( debug_time_test_pattern )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 2 )
	PATTERN_MAR_RELOC_UINST( 4 )
	PATTERN_MAR_RELOC_UINST( 5 )
}

PATTERN_MAR_FUNCB_UINSTS( debug_time_test_pattern )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 5, debug_time_test_pattern, 5 )
	PATTERN_MAR_FUNCB_UINST( 0, debug_time_test_pattern, 0 )
	PATTERN_MAR_FUNCB_UINST( 2, debug_time_test_pattern, 2 )
	PATTERN_MAR_FUNCB_UINST( 4, debug_time_test_pattern, 1 )
}

PATTERN_COUNTER_UINSTS( debug_time_test_pattern )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, debug_time_test_pattern, 0 )
	PATTERN_COUNTER_UINST( 2, debug_time_test_pattern, 2 )
	PATTERN_COUNTER_UINST( 4, debug_time_test_pattern, 1 )
}

PATTERN_VERSIONS( debug_time_test_pattern )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( debug_time_test_pattern )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET7 )
}

PATTERN_USED_VIHHS( debug_time_test_pattern )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( debug_time_test_pattern )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( debug_time_test_pattern )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( debug_time_test_pattern )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( debug_time_test_pattern )
	INSTRUCTIONS( debug_time_test_pattern )
	LABELS( debug_time_test_pattern )
	MAR_RELOC_UINSTS( debug_time_test_pattern )
	MAR_FUNCB_UINSTS( debug_time_test_pattern )
	COUNTER_UINSTS( debug_time_test_pattern )
	VERSIONS( debug_time_test_pattern )
	USED_TSETS( debug_time_test_pattern )
	USED_VIHHS( debug_time_test_pattern )
	ATTRIBUTES( debug_time_test_pattern )
	HW_REQUIREMENTS( debug_time_test_pattern )
}



/************ pattern "force_V_pat" ************/

PATTERN_INITIAL_CONDITIONS( force_V_pat )   /* C Code to set initial conditions */
{
	
}

PATTERN_INSTRUCTIONS( force_V_pat )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0008100E,0x8000000C,0x00000000,0x08000000,0x00010000,0x00019AC5,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00000018,0x0008000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( force_V_pat )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "write_test_start" )
}

PATTERN_MAR_RELOC_UINSTS( force_V_pat )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 1 )
}

PATTERN_MAR_FUNCB_UINSTS( force_V_pat )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 1, force_V_pat, 1 )
	PATTERN_MAR_FUNCB_UINST( 0, force_V_pat, 0 )
}

PATTERN_COUNTER_UINSTS( force_V_pat )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, force_V_pat, 0 )
}

PATTERN_VERSIONS( force_V_pat )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( force_V_pat )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET12 )
}

PATTERN_USED_VIHHS( force_V_pat )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( force_V_pat )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( force_V_pat )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( force_V_pat )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( force_V_pat )
	INSTRUCTIONS( force_V_pat )
	LABELS( force_V_pat )
	MAR_RELOC_UINSTS( force_V_pat )
	MAR_FUNCB_UINSTS( force_V_pat )
	COUNTER_UINSTS( force_V_pat )
	VERSIONS( force_V_pat )
	USED_TSETS( force_V_pat )
	USED_VIHHS( force_V_pat )
	ATTRIBUTES( force_V_pat )
	HW_REQUIREMENTS( force_V_pat )
}



/************ pattern "reset_set_01_cycle_pat" ************/

PATTERN_INITIAL_CONDITIONS( reset_set_01_cycle_pat )   /* C Code to set initial conditions */
{
	
	count( 1,20);
	count( 2,20);
	dmain( 0x0    );
	dbase( 0xffff );
}

PATTERN_INSTRUCTIONS( reset_set_01_cycle_pat )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00800304,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00000018,0x8008000C,0x00000000,0x08000000,0x00010000,0x00819B04,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00000038,0x00000018,0x00000000,0x00000000,0x00010000,0x00801B04,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x40010002,0x00801B44,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00001058,0x8020000C,0x00000000,0x08000000,0x40010002,0x00819B44,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000006C,0x00000018,0x00000000,0x02000000,0x40010002,0x00801B44,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000200C,0x8000000C,0x00000000,0x0A000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
	PATTERN_INSTRUCTION(0x0040300E,0x8000000C,0x00000000,0x08000000,0x00010000,0x00801B04,0x00000000,0x34487400,0x00012110)
	PATTERN_INSTRUCTION(0x00000018,0x0040000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( reset_set_01_cycle_pat )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "init_config" )
	PATTERN_LABEL( 1, "reset_loop" )
	PATTERN_LABEL( 2, "reset_done" )
	PATTERN_LABEL( 3, "set_config" )
	PATTERN_LABEL( 4, "set_loop" )
	PATTERN_LABEL( 5, "set_done" )
	PATTERN_LABEL( 6, "count_loop" )
	PATTERN_LABEL( 7, "another_address_loop" )
}

PATTERN_MAR_RELOC_UINSTS( reset_set_01_cycle_pat )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 1 )
	PATTERN_MAR_RELOC_UINST( 4 )
	PATTERN_MAR_RELOC_UINST( 6 )
	PATTERN_MAR_RELOC_UINST( 7 )
	PATTERN_MAR_RELOC_UINST( 8 )
}

PATTERN_MAR_FUNCB_UINSTS( reset_set_01_cycle_pat )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 8, reset_set_01_cycle_pat, 8 )
	PATTERN_MAR_FUNCB_UINST( 1, reset_set_01_cycle_pat, 1 )
	PATTERN_MAR_FUNCB_UINST( 4, reset_set_01_cycle_pat, 4 )
	PATTERN_MAR_FUNCB_UINST( 6, reset_set_01_cycle_pat, 0 )
	PATTERN_MAR_FUNCB_UINST( 7, reset_set_01_cycle_pat, 0 )
}

PATTERN_COUNTER_UINSTS( reset_set_01_cycle_pat )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 1, reset_set_01_cycle_pat, 1 )
	PATTERN_COUNTER_UINST( 4, reset_set_01_cycle_pat, 4 )
	PATTERN_COUNTER_UINST( 6, reset_set_01_cycle_pat, 0 )
	PATTERN_COUNTER_UINST( 7, reset_set_01_cycle_pat, 0 )
}

PATTERN_VERSIONS( reset_set_01_cycle_pat )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( reset_set_01_cycle_pat )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET13 )
	PATTERN_USED_TSET( TSET14 )
}

PATTERN_USED_VIHHS( reset_set_01_cycle_pat )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( reset_set_01_cycle_pat )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( reset_set_01_cycle_pat )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( reset_set_01_cycle_pat )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( reset_set_01_cycle_pat )
	INSTRUCTIONS( reset_set_01_cycle_pat )
	LABELS( reset_set_01_cycle_pat )
	MAR_RELOC_UINSTS( reset_set_01_cycle_pat )
	MAR_FUNCB_UINSTS( reset_set_01_cycle_pat )
	COUNTER_UINSTS( reset_set_01_cycle_pat )
	VERSIONS( reset_set_01_cycle_pat )
	USED_TSETS( reset_set_01_cycle_pat )
	USED_VIHHS( reset_set_01_cycle_pat )
	ATTRIBUTES( reset_set_01_cycle_pat )
	HW_REQUIREMENTS( reset_set_01_cycle_pat )
}



/************ pattern "fastest_write_test_pattern_slope_version_pattern" ************/

PATTERN_INITIAL_CONDITIONS( fastest_write_test_pattern_slope_version_pattern )   /* C Code to set initial conditions */
{
	
	count( 1, 1);
	count( 2, 1);
	count( 3, 10);
}

PATTERN_INSTRUCTIONS( fastest_write_test_pattern_slope_version_pattern )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x00000038,0x8000000C,0x00000000,0x08000000,0x00010000,0x00800384,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000004C,0x00000018,0x00000000,0x02000000,0x00010000,0x00819B84,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000100C,0x8010000C,0x00000000,0x0A000000,0x00010000,0x00819904,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00002078,0x8018000C,0x00000000,0x08000000,0x00010000,0x00819BC4,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00801B84,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0030300E,0x8008000C,0x00000000,0x08000000,0x00010000,0x00801B84,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x00000018,0x0030000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( fastest_write_test_pattern_slope_version_pattern )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "write_test_start" )
	PATTERN_LABEL( 1, "write_start" )
	PATTERN_LABEL( 2, "write_clock_loop_1" )
	PATTERN_LABEL( 3, "write_clock_loop_2" )
	PATTERN_LABEL( 4, "write_done" )
	PATTERN_LABEL( 5, "another_loop" )
}

PATTERN_MAR_RELOC_UINSTS( fastest_write_test_pattern_slope_version_pattern )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 2 )
	PATTERN_MAR_RELOC_UINST( 3 )
	PATTERN_MAR_RELOC_UINST( 5 )
	PATTERN_MAR_RELOC_UINST( 6 )
}

PATTERN_MAR_FUNCB_UINSTS( fastest_write_test_pattern_slope_version_pattern )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 6, fastest_write_test_pattern_slope_version_pattern, 6 )
	PATTERN_MAR_FUNCB_UINST( 0, fastest_write_test_pattern_slope_version_pattern, 0 )
	PATTERN_MAR_FUNCB_UINST( 2, fastest_write_test_pattern_slope_version_pattern, 2 )
	PATTERN_MAR_FUNCB_UINST( 3, fastest_write_test_pattern_slope_version_pattern, 3 )
	PATTERN_MAR_FUNCB_UINST( 5, fastest_write_test_pattern_slope_version_pattern, 1 )
}

PATTERN_COUNTER_UINSTS( fastest_write_test_pattern_slope_version_pattern )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, fastest_write_test_pattern_slope_version_pattern, 0 )
	PATTERN_COUNTER_UINST( 2, fastest_write_test_pattern_slope_version_pattern, 2 )
	PATTERN_COUNTER_UINST( 3, fastest_write_test_pattern_slope_version_pattern, 3 )
	PATTERN_COUNTER_UINST( 5, fastest_write_test_pattern_slope_version_pattern, 1 )
}

PATTERN_VERSIONS( fastest_write_test_pattern_slope_version_pattern )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( fastest_write_test_pattern_slope_version_pattern )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET5 )
	PATTERN_USED_TSET( TSET15 )
	PATTERN_USED_TSET( TSET16 )
}

PATTERN_USED_VIHHS( fastest_write_test_pattern_slope_version_pattern )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( fastest_write_test_pattern_slope_version_pattern )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( fastest_write_test_pattern_slope_version_pattern )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( fastest_write_test_pattern_slope_version_pattern )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( fastest_write_test_pattern_slope_version_pattern )
	INSTRUCTIONS( fastest_write_test_pattern_slope_version_pattern )
	LABELS( fastest_write_test_pattern_slope_version_pattern )
	MAR_RELOC_UINSTS( fastest_write_test_pattern_slope_version_pattern )
	MAR_FUNCB_UINSTS( fastest_write_test_pattern_slope_version_pattern )
	COUNTER_UINSTS( fastest_write_test_pattern_slope_version_pattern )
	VERSIONS( fastest_write_test_pattern_slope_version_pattern )
	USED_TSETS( fastest_write_test_pattern_slope_version_pattern )
	USED_VIHHS( fastest_write_test_pattern_slope_version_pattern )
	ATTRIBUTES( fastest_write_test_pattern_slope_version_pattern )
	HW_REQUIREMENTS( fastest_write_test_pattern_slope_version_pattern )
}



/************ pattern "fastest_write_rst_test_pattern" ************/

PATTERN_INITIAL_CONDITIONS( fastest_write_rst_test_pattern )   /* C Code to set initial conditions */
{
	
	count( 1, 1);
	count( 2, 50);
}

PATTERN_INSTRUCTIONS( fastest_write_rst_test_pattern )   /* Microcode */
{
	/* 0 */
	PATTERN_INSTRUCTION(0x00000038,0x8000000C,0x00000000,0x08000000,0x00010000,0x00800304,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00819B04,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x00001058,0x8010000C,0x00000000,0x08000000,0x00010000,0x00819B04,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0000000C,0x00000018,0x00000000,0x02000000,0x00010000,0x00801B04,0x00000000,0x34443400,0x000110D0)
	PATTERN_INSTRUCTION(0x0028200E,0x8008000C,0x00000000,0x08000000,0x00010000,0x00801B04,0x00000000,0x34484400,0x000121D0)
	PATTERN_INSTRUCTION(0x00000018,0x0028000E,0x00000020,0x00000000,0x00010000,0x00000000,0x00000000,0x34043400,0x000010D0)
}

PATTERN_LABELS( fastest_write_rst_test_pattern )   /* List of all labels with their associated microinstructions */
{
	PATTERN_LABEL( 0, "write_test_start" )
	PATTERN_LABEL( 1, "write_start" )
	PATTERN_LABEL( 2, "write_clock_loop" )
	PATTERN_LABEL( 3, "write_done" )
	PATTERN_LABEL( 4, "another_loop" )
}

PATTERN_MAR_RELOC_UINSTS( fastest_write_rst_test_pattern )   /* Microinstructions that need MAR address relocated */
{
	PATTERN_MAR_RELOC_UINST( 0 )
	PATTERN_MAR_RELOC_UINST( 2 )
	PATTERN_MAR_RELOC_UINST( 4 )
	PATTERN_MAR_RELOC_UINST( 5 )
}

PATTERN_MAR_FUNCB_UINSTS( fastest_write_rst_test_pattern )   /* Instructions requiring MAR_FUNCB fixup */
{
	PATTERN_MAR_FUNCB_UINST( 5, fastest_write_rst_test_pattern, 5 )
	PATTERN_MAR_FUNCB_UINST( 0, fastest_write_rst_test_pattern, 0 )
	PATTERN_MAR_FUNCB_UINST( 2, fastest_write_rst_test_pattern, 2 )
	PATTERN_MAR_FUNCB_UINST( 4, fastest_write_rst_test_pattern, 1 )
}

PATTERN_COUNTER_UINSTS( fastest_write_rst_test_pattern )   /* Instructions requiring Counter func/addr fixup */
{
	PATTERN_COUNTER_UINST( 0, fastest_write_rst_test_pattern, 0 )
	PATTERN_COUNTER_UINST( 2, fastest_write_rst_test_pattern, 2 )
	PATTERN_COUNTER_UINST( 4, fastest_write_rst_test_pattern, 1 )
}

PATTERN_VERSIONS( fastest_write_rst_test_pattern )   /* Version of the compiler output */
{
	PATTERN_VERSION( PATTERN_VAR_GOSUB, 1 )
}

PATTERN_USED_TSETS( fastest_write_rst_test_pattern )   /* TSETS used by this pattern */
{
	PATTERN_USED_TSET( TSET1 )
	PATTERN_USED_TSET( TSET13 )
}

PATTERN_USED_VIHHS( fastest_write_rst_test_pattern )   /* VIHH used by this pattern */
{
	PATTERN_USED_VIHH( VIHH1 )
}

PATTERN_ATTRIBUTES( fastest_write_rst_test_pattern )   /* Pattern attributes */
{
	PATTERN_ATTRIBUTE( MEM )
	PATTERN_ATTRIBUTE( SINGLE )
}

PATTERN_HW_REQUIREMENTS( fastest_write_rst_test_pattern )   /* Hardware requirements */
{
	PATTERN_HW_REQUIREMENT( mag, 2 )
}

PATTERN( fastest_write_rst_test_pattern )   /* Process the pattern specific information */
{
	INITIAL_CONDITIONS( fastest_write_rst_test_pattern )
	INSTRUCTIONS( fastest_write_rst_test_pattern )
	LABELS( fastest_write_rst_test_pattern )
	MAR_RELOC_UINSTS( fastest_write_rst_test_pattern )
	MAR_FUNCB_UINSTS( fastest_write_rst_test_pattern )
	COUNTER_UINSTS( fastest_write_rst_test_pattern )
	VERSIONS( fastest_write_rst_test_pattern )
	USED_TSETS( fastest_write_rst_test_pattern )
	USED_VIHHS( fastest_write_rst_test_pattern )
	ATTRIBUTES( fastest_write_rst_test_pattern )
	HW_REQUIREMENTS( fastest_write_rst_test_pattern )
}
